<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
		    
<mapper namespace="com.seok.home.member.MemberDAO">

	<!--                         관리자 : 데이터 조회                           -->
	<select id="getMemberCnt" resultType="Long">
		SELECT COUNT(*) FROM MEMBER
	</select>
 	
 	<sql id="search">
		<choose>
			<when test="kind == 'ID'">ID LIKE '%'||#{search}||'%'</when>
			<when test="kind == 'NAME'">NAME LIKE '%'||#{search}||'%'</when>
			<when test="kind == 'N_NAME'">N_NAME LIKE '%'||#{search}||'%'</when>
			<when test="kind == 'PHONE'">PHONE = #{search}</when>
			<when test="kind == 'EMAIL'">EMAIL = #{search}</when>
			<when test="kind == 'B_DATE'">B_DATE = #{search}</when>
			<otherwise>'a' = 'a'</otherwise>
		</choose>
	</sql>
	<select id="getAdminMemberList" parameterType="AdminPager" resultMap="getAdminList">
		select rown, rolenum, id, name, n_name, b_date, gender, email, phone, point, rolename           
		from(select *            
		    from(select rownum as rown, id, name, n_name, b_date, gender, email, phone, point
		        from member m
		        where <include refid="search"></include>
		        order by id asc)
		        where rown between #{startRow} and #{lastRow}) MR
		left join member_role R
		using (id)
		left join role RR
		using (rolenum)
		order by id asc, rolenum desc
	</select>
	
	<select id="getAdminMemberTotal" parameterType="AdminPager" resultType="Long">
		select count(*) 
            from member m
            where <include refid="search"></include>
	</select>
	
	<resultMap type="MemberDTO" id="getAdminList">
		<id column="ID" property="id"/>
		<result column="NAME" property="name"/>
		<result column="N_NAME" property="n_name"/>
		<result column="B_DATE" property="b_date"/>
		<result column="GENDER" property="gender"/>
		<result column="EMAIL" property="email"/>
		<result column="PHONE" property="phone"/>
		<result column="point" property="point"/>
		<collection property="roleDTOs" javaType="List" ofType="RoleDTO">
			<id column="roleNum" property="roleNum"/>
			<result column="roleName" property="roleName"/>
		</collection>
	</resultMap>

	<!--                               회원                                 -->
	<select id="getLogin" parameterType="MemberDTO" resultMap="getLoginResult">
		/* 로그인시(아이디와 비밀번호가 맞으면) */
		/* 강사신청번호, 아이디, 이름, 닉네임, 성별, 이메일, 폰, 마일리지, 등급번호, 등급이름 조회 */
		
		SELECT T.T_NUM, M.ID, M.NAME, M.N_NAME, M.EMAIL, M.PHONE, M.POINT, MR.ROLENUM, R.ROLENAME
		FROM TEACHER T
		    RIGHT JOIN
			MEMBER M
			ON (T.ID=M.ID)
			INNER JOIN
			MEMBER_ROLE MR
			ON (M.ID=MR.ID)
			INNER JOIN
			ROLE R
			ON (MR.ROLENUM=R.ROLENUM)
		WHERE M.ID=#{id} AND M.PW=#{pw}
		ORDER BY R.ROLENUM ASC
	</select>
	<resultMap type="MemberDTO" id="getLoginResult">
		<id column="ID" property="id"></id>
		<result column="NAME" property="name"/>
		<result column="N_NAME" property="n_name"/>
		<result column="GENDER" property="gender"/>
		<result column="EMAIL" property="email"/>
		<result column="PHONE" property="phone"/>
		<result column="POINT" property="point"/>
		<collection property="roleDTOs" javaType="List" ofType="RoleDTO">
			<id column="ROLENUM" property="roleNum"/>
			<result column="ROLENAME" property="roleName"/>
		</collection>
	</resultMap>
	
	<select id="getIdCheck" parameterType="MemberDTO" resultType="Integer">
		/* 회원 아이디중복 확인 */
		
		SELECT COUNT(*) FROM MEMBER WHERE ID=#{id}
	</select>
	
	<select id="getNnameCheck" parameterType="MemberDTO" resultType="Integer">
		/* 회원 닉네임중복 확인 */
		
		SELECT COUNT(*) FROM MEMBER WHERE N_NAME=#{n_name}
	</select>
		
	<insert id="setJoin" parameterType="MemberDTO">
		/* 회원 데이터 추가 */
		
		INSERT INTO MEMBER(ID, PW, NAME, N_NAME, B_DATE, GENDER, EMAIL, PHONE, POINT)
		VALUES (#{id}, #{pw}, #{name}, #{n_name}, #{b_date}, #{gender}, #{email}, #{phone}, 5000)
	</insert>
	
	<insert id="setMemberRole" parameterType="MemberDTO">
		/* 회원 등급 데이터 추가 */
		
		INSERT INTO MEMBER_ROLE(R_NUM, ROLENUM, ID)
		VALUES(MEMBER_ROLE_SEQ.NEXTVAL, 3, #{id})
	</insert>
	
	<delete id="setDeleteJoin" parameterType="MemberDTO">
		/* 회원 데이터 삭제 */
		DELETE FROM MEMBER WHERE ID=#{id}
	</delete>
	
	<!--                            관리자 : 등급 추가                              -->
	<insert id="setAdminRole" parameterType="MemberDTO">
		/* 관리자 등급 데이터 추가 */
		
		INSERT INTO MEMBER_ROLE(R_NUM, ROLENUM, ID)
		VALUES(MEMBER_ROLE_SEQ.NEXTVAL, 1, #{id})
	</insert>
	
	<!--                            마일리지                              -->
	<select id="getPoint" parameterType="MemberDTO" resultType="Long">
		select point from member where id=#{id}
	</select>
	
	<update id="updatePoint" parameterType="MemberDTO">
		UPDATE MEMBER SET POINT=#{point} WHERE ID=#{id}
	</update>
	
	<!--                                프로필                                  -->
	<select id="getProfile" parameterType="MemberDTO" resultMap="getProfileResult">
		/* 프로필에 쓰일 정보 조회 화면 */
	
		SELECT M.ID, M.NAME, M.N_NAME, M.B_DATE, M.GENDER, M.EMAIL, M.PHONE, MF.NUM, MF.F_NAME
		FROM MEMBER M
		    LEFT JOIN
		    MEMBER_FILE MF
		    ON M.ID = MF.ID
		WHERE M.ID=#{id}
	</select>
	<resultMap type="MemberDTO" id="getProfileResult">
		<id column="ID" property="id"/>
		<result column="NAME" property="name"/>
		<result column="N_NAME" property="n_name"/>
		<result column="B_DATE" property="b_date"/>
		<result column="GENDER" property="gender"/>
		<result column="EMAIL" property="email"/>
		<result column="PHONE" property="phone"/>
		<association property="memberFileDTO" javaType="MemberFileDTO">
			<id column="NUM" property="num"/>
			<result column="F_NAME" property="f_name"/>
		</association>
	</resultMap>
	
	<update id="setEditProfile" parameterType="MemberDTO">
		/* 프로필정보 수정 */
		
		UPDATE MEMBER SET N_NAME=#{n_name}, GENDER=#{gender}, EMAIL=#{email}, PHONE=#{phone} WHERE ID=#{id}
	</update>
	
	<select id="getPwCheck" parameterType="MemberDTO" resultType="MemberDTO">
		/* 회원비밀번호 확인 */
		
		SELECT PW FROM MEMBER WHERE ID=#{id}
	</select>
	
	<update id="setUpdatePw" parameterType="MemberDTO">
		/* 회원비밀번호 변경 */
		
		UPDATE MEMBER SET PW=#{pw} WHERE ID=#{id}
	</update>
	
	<!--                            프로필사진                              -->
	<insert id="setAddFile" parameterType="MemberFileDTO">
		/* 프로필사진 데이터 추가 */
		<selectKey keyProperty="num" order="BEFORE" resultType="Long">
			SELECT FILE_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO MEMBER_FILE (NUM, ID, F_NAME, F_ORINAME)
		VALUES(#{num}, #{id}, #{f_name}, #{f_oriname})
	</insert>
	
	<delete id="setDeleteFile" parameterType="MemberFileDTO">
		/* 프로필사진 데이터 삭제 */
		
		DELETE FROM MEMBER_FILE WHERE ID=#{id}
	</delete>
	
	<!--                     등급 데이터 삭제                       -->
	<delete id="setDeleteMemberRole" parameterType="MemberDTO">
		/* 회원등급 데이터 삭제 */
		DELETE FROM MEMBER_ROLE WHERE ID=#{id}
	</delete>
	
	<delete id="setDeleteTeacherRole" parameterType="MemberDTO">
		/* 강사권한 삭제 */
		DELETE FROM MEMBER_ROLE WHERE ID=#{id} AND ROLENUM=2
	</delete>
	
	<delete id="setDeleteTeacher" parameterType="MemberDTO">
		/* 강사권한 삭제 */
		DELETE FROM teacher WHERE ID=#{id}
	</delete>
	
</mapper> 